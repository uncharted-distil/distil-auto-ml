{
    "id": "db2bd678-2be3-4d57-a726-0b56de62fc51",
    "schema": "https://metadata.datadrivendiscovery.org/schemas/v0/pipeline.json",
    "created": "2020-10-09T15:19:14.673611Z",
    "inputs": [
        {
            "name": "inputs"
        }
    ],
    "outputs": [
        {
            "data": "steps.6.produce",
            "name": "output"
        }
    ],
    "steps": [
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                "version": "0.2.0",
                "python_path": "d3m.primitives.data_transformation.denormalize.Common",
                "name": "Denormalize datasets"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "inputs.0"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ]
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                "version": "0.3.0",
                "python_path": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                "name": "Extract a DataFrame from a Dataset"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.0.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ]
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                "version": "0.6.0",
                "python_path": "d3m.primitives.data_transformation.column_parser.Common",
                "name": "Parses strings into their types"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.1.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ],
            "hyperparams": {
                "parse_semantic_types": {
                    "type": "VALUE",
                    "data": [
                        "http://schema.org/Boolean",
                        "http://schema.org/Integer",
                        "http://schema.org/Float",
                        "https://metadata.datadrivendiscovery.org/types/FloatVector"
                    ]
                }
            }
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                "version": "0.4.0",
                "python_path": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.Common",
                "name": "Extracts columns by semantic type"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.2.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ],
            "hyperparams": {
                "semantic_types": {
                    "type": "VALUE",
                    "data": [
                        "https://metadata.datadrivendiscovery.org/types/Attribute"
                    ]
                }
            }
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                "version": "0.4.0",
                "python_path": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.Common",
                "name": "Extracts columns by semantic type"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.2.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ],
            "hyperparams": {
                "semantic_types": {
                    "type": "VALUE",
                    "data": [
                        "https://metadata.datadrivendiscovery.org/types/Target",
                        "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                    ]
                }
            }
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "7c305f3a-442a-41ad-b9db-8c437753b119",
                "version": "0.4.1",
                "python_path": "d3m.primitives.classification.bert_classifier.DistilBertPairClassification",
                "name": "BERT pair classification"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.3.produce"
                },
                "outputs": {
                    "type": "CONTAINER",
                    "data": "steps.4.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ],
            "hyperparams": {
                "doc_col_0": {
                    "type": "VALUE",
                    "data": 1
                },
                "doc_col_1": {
                    "type": "VALUE",
                    "data": 3
                },
                "batch_size": {
                    "type": "VALUE",
                    "data": 16
                }
            }
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                "version": "0.3.0",
                "python_path": "d3m.primitives.data_transformation.construct_predictions.Common",
                "name": "Construct pipeline predictions output"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.5.produce"
                },
                "reference": {
                    "type": "CONTAINER",
                    "data": "steps.2.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ]
        }
    ],
    "digest": "535df9217a183cf2557b4ec6e75a84c3b8239d1737c0e630757a48739e14a6e7"
}
