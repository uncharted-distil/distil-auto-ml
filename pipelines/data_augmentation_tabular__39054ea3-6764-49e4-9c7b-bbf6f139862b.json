{
    "id": "39054ea3-6764-49e4-9c7b-bbf6f139862b",
    "schema": "https://metadata.datadrivendiscovery.org/schemas/v0/pipeline.json",
    "created": "2019-07-21T01:12:34.095065Z",
    "inputs": [
        {
            "name": "inputs"
        }
    ],
    "outputs": [
        {
            "data": "steps.13.produce",
            "name": "output"
        }
    ],
    "steps": [
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "fe0f1ac8-1d39-463a-b344-7bd498a31b91",
                "version": "0.1",
                "python_path": "d3m.primitives.data_augmentation.datamart_augmentation.Common",
                "name": "Perform dataset augmentation using Datamart",
                "digest": "498665b64f05ebcc14cd78f3000804fff366b833628462010d4eca931c086b81"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "inputs.0"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ],
            "hyperparams": {
                "system_identifier": {
                    "type": "VALUE",
                    "data": "NYU"
                },
                "search_result": {
                    "type": "VALUE",
                    "data": "{\"id\": \"datamart.socrata.data-cityofnewyork-us.66be-66yr\", \"score\": 1.0, \"metadata\": {\"columns\": [{\"name\": \"Development Name\", \"semantic_types\": [], \"structural_type\": \"http://schema.org/Text\"}, {\"name\": \"Borough\", \"semantic_types\": [], \"structural_type\": \"http://schema.org/Text\"}, {\"name\": \"Account Name\", \"semantic_types\": [], \"structural_type\": \"http://schema.org/Text\"}, {\"name\": \"Location\", \"semantic_types\": [], \"structural_type\": \"http://schema.org/Text\"}, {\"name\": \"Meter AMR\", \"semantic_types\": [\"https://schema.org/Enumeration\"], \"structural_type\": \"http://schema.org/Text\"}, {\"coverage\": [], \"mean\": 0.0, \"name\": \"Meter Scope\", \"semantic_types\": [\"http://schema.org/Boolean\", \"https://metadata.datadrivendiscovery.org/types/PhoneNumber\"], \"stddev\": 0.0, \"structural_type\": \"http://schema.org/Integer\"}, {\"coverage\": [{\"range\": {\"gte\": 205.0, \"lte\": 285.0}}, {\"range\": {\"gte\": 2.0, \"lte\": 123.0}}, {\"range\": {\"gte\": 324.0, \"lte\": 523.0}}], \"mean\": 262.57540426122563, \"name\": \"TDS #\", \"semantic_types\": [], \"stddev\": 103.26752442432249, \"structural_type\": \"http://schema.org/Integer\"}, {\"coverage\": [{\"range\": {\"gte\": 510.0, \"lte\": 650.0}}, {\"range\": {\"gte\": 206.0, \"lte\": 397.0}}, {\"range\": {\"gte\": 751.0, \"lte\": 847.0}}], \"mean\": 478.2294746339094, \"name\": \"EDP\", \"semantic_types\": [], \"stddev\": 189.2468652239471, \"structural_type\": \"http://schema.org/Integer\"}, {\"name\": \"RC Code\", \"semantic_types\": [], \"structural_type\": \"http://schema.org/Text\"}, {\"name\": \"Funding Source\", \"semantic_types\": [], \"structural_type\": \"http://schema.org/Text\"}, {\"name\": \"AMP #\", \"semantic_types\": [], \"structural_type\": \"http://schema.org/Text\"}, {\"name\": \"Vendor Name\", \"semantic_types\": [\"http://schema.org/Text\"], \"structural_type\": \"http://schema.org/Text\"}, {\"coverage\": [{\"range\": {\"gte\": 5599959.0, \"lte\": 7591975.0}}, {\"range\": {\"gte\": 2724790.0, \"lte\": 3871322.0}}, {\"range\": {\"gte\": 4059834.0, \"lte\": 5400461.0}}], \"mean\": 4607897.302137553, \"name\": \"UMIS BILL ID\", \"semantic_types\": [\"http://schema.org/identifier\", \"https://metadata.datadrivendiscovery.org/types/PhoneNumber\"], \"stddev\": 1330578.929068996, \"structural_type\": \"http://schema.org/Integer\"}, {\"coverage\": [{\"range\": {\"gte\": 1480550400.0, \"lte\": 1548979200.0}}, {\"range\": {\"gte\": 1364774400.0, \"lte\": 1412121600.0}}, {\"range\": {\"gte\": 1420070400.0, \"lte\": 1472688000.0}}], \"mean\": 1442823053.5915053, \"name\": \"Revenue Month\", \"semantic_types\": [\"http://schema.org/DateTime\"], \"stddev\": 51037013.45810839, \"structural_type\": \"http://schema.org/Text\"}, {\"coverage\": [{\"range\": {\"gte\": 1479686400.0, \"lte\": 1548201600.0}}, {\"range\": {\"gte\": 1358121600.0, \"lte\": 1411516800.0}}, {\"range\": {\"gte\": 1419120000.0, \"lte\": 1471478400.0}}], \"mean\": 1441763779.6377263, \"name\": \"Service Start Date\", \"semantic_types\": [\"http://schema.org/DateTime\"], \"stddev\": 51255414.106129915, \"structural_type\": \"http://schema.org/Text\"}, {\"coverage\": [{\"range\": {\"gte\": 1482192000.0, \"lte\": 1550707200.0}}, {\"range\": {\"gte\": 1366588800.0, \"lte\": 1416700800.0}}, {\"range\": {\"gte\": 1424563200.0, \"lte\": 1474502400.0}}], \"mean\": 1444666697.3141787, \"name\": \"Service End Date\", \"semantic_types\": [\"http://schema.org/DateTime\"], \"stddev\": 50970463.50526971, \"structural_type\": \"http://schema.org/Text\"}, {\"coverage\": [{\"range\": {\"gte\": 28.0, \"lte\": 34.0}}, {\"range\": {\"gte\": 251.0, \"lte\": 685.0}}, {\"range\": {\"gte\": 68.0, \"lte\": 161.0}}], \"mean\": 33.59858421819696, \"name\": \"# days\", \"semantic_types\": [], \"stddev\": 25.568883406901094, \"structural_type\": \"http://schema.org/Integer\"}, {\"name\": \"Meter Number\", \"semantic_types\": [], \"structural_type\": \"http://schema.org/Text\"}, {\"name\": \"Estimated\", \"semantic_types\": [\"https://schema.org/Enumeration\"], \"structural_type\": \"http://schema.org/Text\"}, {\"coverage\": [{\"range\": {\"gte\": 36.8, \"lte\": 3708.62}}, {\"range\": {\"gte\": 35762.88, \"lte\": 132714.34}}, {\"range\": {\"gte\": 5170.78, \"lte\": 20288.4}}], \"mean\": 2145.351942188909, \"name\": \"Current Charges\", \"semantic_types\": [\"https://metadata.datadrivendiscovery.org/types/PhoneNumber\"], \"stddev\": 5398.794021579102, \"structural_type\": \"http://schema.org/Float\"}, {\"name\": \"Rate Class\", \"semantic_types\": [\"https://schema.org/Enumeration\"], \"structural_type\": \"http://schema.org/Text\"}, {\"name\": \"Bill Analyzed\", \"semantic_types\": [\"https://schema.org/Enumeration\"], \"structural_type\": \"http://schema.org/Text\"}, {\"coverage\": [{\"range\": {\"gte\": 0.0, \"lte\": 419.0}}, {\"range\": {\"gte\": 588.0, \"lte\": 2361.0}}, {\"range\": {\"gte\": 5200.0, \"lte\": 15434.0}}], \"mean\": 224.05159969463529, \"name\": \"Consumption (HCF)\", \"semantic_types\": [], \"stddev\": 578.590025609186, \"structural_type\": \"http://schema.org/Integer\"}, {\"name\": \"Water&Sewer Charges\", \"semantic_types\": [], \"structural_type\": \"http://schema.org/Text\"}, {\"name\": \"Other Charges\", \"semantic_types\": [], \"structural_type\": \"http://schema.org/Text\"}, {\"coverage\": [{\"range\": {\"gte\": 4100430019.0, \"lte\": 4132720054.0}}, {\"range\": {\"gte\": 1003750045.0, \"lte\": 1021320084.0}}, {\"range\": {\"gte\": 2024270012.0, \"lte\": 3048180133.0}}], \"mean\": 3151391803.3179264, \"name\": \"BBL\", \"semantic_types\": [\"https://metadata.datadrivendiscovery.org/types/PhoneNumber\"], \"stddev\": 1168625989.3856301, \"structural_type\": \"http://schema.org/Integer\"}], \"date\": \"2019-06-30T17:55:55.193629Z\", \"description\": \"Monthly consumption and cost data by borough and development. Data set includes utility vendor an...\", \"materialize\": {\"date\": \"2019-06-30T15:53:25.828858Z\", \"direct_url\": \"https://data.cityofnewyork.us/api/views/66be-66yr/rows.csv?accessType=DOWNLOAD\", \"identifier\": \"datamart.socrata\", \"socrata_domain\": \"data.cityofnewyork.us\", \"socrata_id\": \"66be-66yr\", \"socrata_updated\": \"2019-05-20T16:27:38.000Z\"}, \"name\": \"Water Consumption And Cost (2013 - March 2019)\", \"nb_rows\": 28818, \"size\": 8198250}, \"augmentation\": {\"type\": \"join\", \"left_columns\": [[1]], \"right_columns\": [[13]], \"left_columns_names\": [[\"tpep_pickup_datetime\"]], \"right_columns_names\": [[\"Revenue Month\"]]}, \"supplied_id\": null, \"supplied_resource_id\": null}"
                }
            }
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                "version": "0.2.0",
                "python_path": "d3m.primitives.data_transformation.denormalize.Common",
                "name": "Denormalize datasets",
                "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.0.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ]
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                "version": "0.3.0",
                "python_path": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                "name": "Extract a DataFrame from a Dataset",
                "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.1.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ]
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                "version": "0.5.0",
                "python_path": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                "name": "Parses strings into their types",
                "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.2.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ],
            "hyperparams": {
                "parse_semantic_types": {
                    "type": "VALUE",
                    "data": [
                        "http://schema.org/Boolean",
                        "http://schema.org/Integer",
                        "http://schema.org/Float",
                        "https://metadata.datadrivendiscovery.org/types/FloatVector"
                    ]
                }
            }
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "7bae062e-f8b0-4358-91f2-9288a51f3e82",
                "version": "0.2.0",
                "python_path": "d3m.primitives.data_transformation.replace_semantic_types.DataFrameCommon",
                "name": "Replace semantic types for columns",
                "digest": "599652196804ded3c55c9bb9226bac2d99c53222546d2b16d8b2f21ea61df694"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.3.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ],
            "hyperparams": {
                "from_semantic_types": {
                    "type": "VALUE",
                    "data": [
                        "http://schema.org/Text"
                    ]
                },
                "to_semantic_types": {
                    "type": "VALUE",
                    "data": [
                        "https://metadata.datadrivendiscovery.org/types/CategoricalData"
                    ]
                }
            }
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                "version": "0.3.0",
                "python_path": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                "name": "Extracts columns by semantic type",
                "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.3.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ],
            "hyperparams": {
                "semantic_types": {
                    "type": "VALUE",
                    "data": [
                        "https://metadata.datadrivendiscovery.org/types/Attribute"
                    ]
                }
            }
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                "version": "0.3.0",
                "python_path": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                "name": "Extracts columns by semantic type",
                "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.3.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ],
            "hyperparams": {
                "semantic_types": {
                    "type": "VALUE",
                    "data": [
                        "https://metadata.datadrivendiscovery.org/types/Target",
                        "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                    ]
                }
            }
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "b1367f5b-bab1-4dfc-a1a9-6a56430e516a",
                "version": "0.1.0",
                "python_path": "d3m.primitives.data_transformation.data_cleaning.DistilEnrichDates",
                "name": "Enrich dates",
                "digest": "1a1b73c13e410404a9b57a278e0e90d358e7cbff05dcd376136cb6fe871e8131"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.5.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ]
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "7cacc8b6-85ad-4c8f-9f75-360e0faee2b8",
                "version": "0.1.0",
                "python_path": "d3m.primitives.data_transformation.data_cleaning.DistilReplaceSingletons",
                "name": "Replace singeltons",
                "digest": "dfd9c020553af36703f32f383d26550561c4de8c21ce19d8601e7277946b6629"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.7.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ]
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "0a9936f3-7784-4697-82f0-2a5fcc744c16",
                "version": "0.1.0",
                "python_path": "d3m.primitives.data_transformation.imputer.DistilCategoricalImputer",
                "name": "Categorical imputer",
                "digest": "57542ab5f843f7f2aa93ef4d7810d7a1eef714e7c35a5b32a42b9482239ff2e5"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.8.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ]
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "d38e2e28-9b18-4ce4-b07c-9d809cd8b915",
                "version": "0.1.0",
                "python_path": "d3m.primitives.data_transformation.encoder.DistilBinaryEncoder",
                "name": "Binary encoder",
                "digest": "252e1b1023ae3d52304b1ed490f3b2bbe1df9a26cc246883043f4a3cfe258f5e"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.9.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ],
            "hyperparams": {
                "min_binary": {
                    "type": "VALUE",
                    "data": 0
                }
            }
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                "version": "2019.6.7",
                "python_path": "d3m.primitives.data_cleaning.imputer.SKlearn",
                "name": "sklearn.impute.SimpleImputer",
                "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.10.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ],
            "hyperparams": {
                "use_semantic_types": {
                    "type": "VALUE",
                    "data": true
                },
                "error_on_no_input": {
                    "type": "VALUE",
                    "data": false
                },
                "return_result": {
                    "type": "VALUE",
                    "data": "replace"
                }
            }
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "e0ad06ce-b484-46b0-a478-c567e1ea7e02",
                "version": "0.1.0",
                "python_path": "d3m.primitives.learner.random_forest.DistilEnsembleForest",
                "name": "EnsembleForest",
                "digest": "8f924fe6065cd5b54f39fb47227a3aa415b4ecc2984ff300420cb7a355e0cb96"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.11.produce"
                },
                "outputs": {
                    "type": "CONTAINER",
                    "data": "steps.6.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ],
            "hyperparams": {
                "metric": {
                    "type": "VALUE",
                    "data": "meanAbsoluteError"
                }
            }
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                "version": "0.3.0",
                "python_path": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                "name": "Construct pipeline predictions output",
                "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.12.produce"
                },
                "reference": {
                    "type": "CONTAINER",
                    "data": "steps.3.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ]
        }
    ],
    "digest": "bd8d59203cc3b9474bad763e9f72c9bbc5d3ffaf129ef8f2257396c492e734fe"
}
